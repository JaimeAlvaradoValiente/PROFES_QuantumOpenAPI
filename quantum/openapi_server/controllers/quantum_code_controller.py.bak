import connexion
import six

from openapi_server import util



from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from numpy import pi


def grover_circuit():  # noqa: E501
    
    """Get the circuit implementation of Grover Algorithm

     # noqa: E501


    :rtype: None
    """


    qreg_q = QuantumRegister(2, 'q')
    creg_c = ClassicalRegister(2, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.h(qreg_q[0])
    circuit.h(qreg_q[1])
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[1])
    circuit.cz(qreg_q[0], qreg_q[1])
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[1])
    circuit.h(qreg_q[0])
    circuit.h(qreg_q[1])
    circuit.z(qreg_q[0])
    circuit.z(qreg_q[1])
    circuit.cz(qreg_q[0], qreg_q[1])
    circuit.h(qreg_q[0])
    circuit.h(qreg_q[1])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])

    return 'do some magic!'



from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from numpy import pi


def random_circuit():  # noqa: E501
    
    """Get the circuit implementation for random numbers

     # noqa: E501


    :rtype: None
    """


    qreg_q = QuantumRegister(5, 'q')
    creg_c = ClassicalRegister(5, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.h(qreg_q[0])
    circuit.h(qreg_q[1])
    circuit.h(qreg_q[2])
    circuit.h(qreg_q[3])
    circuit.h(qreg_q[4])
    circuit.measure(qreg_q[0], creg_c[0])

    return 'do some magic!'
